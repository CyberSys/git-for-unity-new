install:
- ps: |
    Set-Location $env:appveyor_build_folder

    hMSBuild.bat /t:restore

    $version = Get-Content "$($env:appveyor_build_folder)\common\SolutionInfo.cs" | %{ $regex = "private const string [\w]+Version = `"([^`"]*)`""; if ($_ -match $regex) { $matches[1] } }
    $env:package_version="$($version).$($env:APPVEYOR_BUILD_NUMBER)"
    Update-AppveyorBuild -Version $env:package_version

    $message = "Building "
    $message += " version " + $env:package_version + " "
    Write-Host $message

assembly_info:
  patch: false
  file: common\SolutionInfo.cs
  assembly_informational_version: "{version}"

configuration: Release
build:
  project: GitForUnity.sln
  verbosity: minimal
test:
  assemblies:
    except:
      - '**\*.TestRunner.dll'
      - '**\*.TestUtils.dll'
  categories:
    except:
    - DoNotRunOnAppVeyor
on_success:
- ps: |
    if ($package) {
      $rootdir=$env:appveyor_build_folder
      Set-Location $rootdir
      $sourcedir="$rootdir\unity\PackageProject"
      $packagename="github-for-unity-$($env:package_version)"
      $packagefile="$rootdir\$($packagename).unitypackage"
      $commitfile="$sourcedir\commit"
      $zipfile="$rootdir\PackageProject-$($env:package_version).zip"

      # generate mdb files
      Write-Output "Generating mdb files"
      Get-ChildItem -Recurse "$($sourcedir)\*.pdb" | foreach { $_.fullname.substring(0, $_.fullname.length - $_.extension.length) } | foreach { Write-Output "Generating $($_).mdb"; & 'lib\pdb2mdb.exe' "$($_).dll" }

      # generate unitypackage
      Write-Output "Generating $packagefile"
      submodules\packaging\unitypackage\run.ps1 -PathToPackage:$sourcedir -OutputFolder:$rootdir -PackageName:$packagename

      # save commit
      Add-Content $commitfile $appveyor_repo_commit

      Write-Output "Zipping $sourcedir to $zipfile"
      7z a $zipfile $sourcedir

      Write-Output "Uploading $zipfile"
      Push-AppveyorArtifact $zipfile -DeploymentName source
      Push-AppveyorArtifact $packagefile -DeploymentName package
      Push-AppveyorArtifact "$($packagefile).md5" -DeploymentName package
    }
on_finish:
- ps: |
    Set-Location $env:appveyor_build_folder
    Get-ChildItem $env:appveyor_build_folder\build\*.log | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name -DeploymentName logs }
